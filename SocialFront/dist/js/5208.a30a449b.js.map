{"version":3,"file":"js/5208.a30a449b.js","mappings":"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","sources":["webpack://social-vue-3/./node_modules/date-fns/constants.mjs","webpack://social-vue-3/./node_modules/date-fns/parseISO.mjs","webpack://social-vue-3/./node_modules/date-fns/constructFrom.mjs","webpack://social-vue-3/./node_modules/date-fns/constructNow.mjs","webpack://social-vue-3/./node_modules/date-fns/toDate.mjs","webpack://social-vue-3/./node_modules/date-fns/startOfDay.mjs","webpack://social-vue-3/./node_modules/date-fns/isSameDay.mjs","webpack://social-vue-3/./node_modules/date-fns/isToday.mjs","webpack://social-vue-3/./node_modules/date-fns/locale/en-US/_lib/formatDistance.mjs","webpack://social-vue-3/./node_modules/date-fns/locale/_lib/buildFormatLongFn.mjs","webpack://social-vue-3/./node_modules/date-fns/locale/en-US/_lib/formatLong.mjs","webpack://social-vue-3/./node_modules/date-fns/locale/en-US/_lib/formatRelative.mjs","webpack://social-vue-3/./node_modules/date-fns/locale/_lib/buildLocalizeFn.mjs","webpack://social-vue-3/./node_modules/date-fns/locale/en-US/_lib/localize.mjs","webpack://social-vue-3/./node_modules/date-fns/locale/_lib/buildMatchFn.mjs","webpack://social-vue-3/./node_modules/date-fns/locale/_lib/buildMatchPatternFn.mjs","webpack://social-vue-3/./node_modules/date-fns/locale/en-US/_lib/match.mjs","webpack://social-vue-3/./node_modules/date-fns/locale/en-US.mjs","webpack://social-vue-3/./node_modules/date-fns/_lib/defaultOptions.mjs","webpack://social-vue-3/./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.mjs","webpack://social-vue-3/./node_modules/date-fns/differenceInCalendarDays.mjs","webpack://social-vue-3/./node_modules/date-fns/startOfYear.mjs","webpack://social-vue-3/./node_modules/date-fns/getDayOfYear.mjs","webpack://social-vue-3/./node_modules/date-fns/startOfWeek.mjs","webpack://social-vue-3/./node_modules/date-fns/startOfISOWeek.mjs","webpack://social-vue-3/./node_modules/date-fns/getISOWeekYear.mjs","webpack://social-vue-3/./node_modules/date-fns/startOfISOWeekYear.mjs","webpack://social-vue-3/./node_modules/date-fns/getISOWeek.mjs","webpack://social-vue-3/./node_modules/date-fns/getWeekYear.mjs","webpack://social-vue-3/./node_modules/date-fns/startOfWeekYear.mjs","webpack://social-vue-3/./node_modules/date-fns/getWeek.mjs","webpack://social-vue-3/./node_modules/date-fns/_lib/addLeadingZeros.mjs","webpack://social-vue-3/./node_modules/date-fns/_lib/format/lightFormatters.mjs","webpack://social-vue-3/./node_modules/date-fns/_lib/format/formatters.mjs","webpack://social-vue-3/./node_modules/date-fns/_lib/format/longFormatters.mjs","webpack://social-vue-3/./node_modules/date-fns/_lib/protectedTokens.mjs","webpack://social-vue-3/./node_modules/date-fns/isDate.mjs","webpack://social-vue-3/./node_modules/date-fns/isValid.mjs","webpack://social-vue-3/./node_modules/date-fns/format.mjs","webpack://social-vue-3/./node_modules/date-fns/isSameYear.mjs","webpack://social-vue-3/./node_modules/date-fns/isThisYear.mjs","webpack://social-vue-3/./src/utilities/tools.js"],"sourcesContent":["/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n","import { millisecondsInHour, millisecondsInMinute } from \"./constants.mjs\";\n\n/**\n * The {@link parseISO} function options.\n */\n\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n * @param options - An object with options\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport function parseISO(argument, options) {\n  const additionalDigits = options?.additionalDigits ?? 2;\n  const dateStrings = splitDateString(argument);\n\n  let date;\n  if (dateStrings.date) {\n    const parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  const timestamp = date.getTime();\n  let time = 0;\n  let offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n    if (isNaN(time)) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    const dirtyDate = new Date(timestamp + time);\n    // JS parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n    const result = new Date(0);\n    result.setFullYear(\n      dirtyDate.getUTCFullYear(),\n      dirtyDate.getUTCMonth(),\n      dirtyDate.getUTCDate(),\n    );\n    result.setHours(\n      dirtyDate.getUTCHours(),\n      dirtyDate.getUTCMinutes(),\n      dirtyDate.getUTCSeconds(),\n      dirtyDate.getUTCMilliseconds(),\n    );\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\n\nconst patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/,\n};\n\nconst dateRegex =\n  /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nconst timeRegex =\n  /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nconst timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  const dateStrings = {};\n  const array = dateString.split(patterns.dateTimeDelimiter);\n  let timeString;\n\n  // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(\n        dateStrings.date.length,\n        dateString.length,\n      );\n    }\n  }\n\n  if (timeString) {\n    const token = patterns.timezone.exec(timeString);\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], \"\");\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  const regex = new RegExp(\n    \"^(?:(\\\\d{4}|[+-]\\\\d{\" +\n      (4 + additionalDigits) +\n      \"})|(\\\\d{2}|[+-]\\\\d{\" +\n      (2 + additionalDigits) +\n      \"})$)\",\n  );\n\n  const captures = dateString.match(regex);\n  // Invalid ISO-formatted year\n  if (!captures) return { year: NaN, restDateString: \"\" };\n\n  const year = captures[1] ? parseInt(captures[1]) : null;\n  const century = captures[2] ? parseInt(captures[2]) : null;\n\n  // either year or century is null, not both\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length),\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n\n  const captures = dateString.match(dateRegex);\n  // Invalid ISO-formatted string\n  if (!captures) return new Date(NaN);\n\n  const isWeekDate = !!captures[4];\n  const dayOfYear = parseDateUnit(captures[1]);\n  const month = parseDateUnit(captures[2]) - 1;\n  const day = parseDateUnit(captures[3]);\n  const week = parseDateUnit(captures[4]);\n  const dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    const date = new Date(0);\n    if (\n      !validateDate(year, month, day) ||\n      !validateDayOfYearDate(year, dayOfYear)\n    ) {\n      return new Date(NaN);\n    }\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  const captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  const hours = parseTimeUnit(captures[1]);\n  const minutes = parseTimeUnit(captures[2]);\n  const seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return (\n    hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000\n  );\n}\n\nfunction parseTimeUnit(value) {\n  return (value && parseFloat(value.replace(\",\", \".\"))) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === \"Z\") return 0;\n\n  const captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n\n  const sign = captures[1] === \"+\" ? -1 : 1;\n  const hours = parseInt(captures[2]);\n  const minutes = (captures[3] && parseInt(captures[3])) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  const date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  const fourthOfJanuaryDay = date.getUTCDay() || 7;\n  const diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\n\n// Validation functions\n\n// February is null to handle the leap year (using ||)\nconst daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\nfunction validateDate(year, month, date) {\n  return (\n    month >= 0 &&\n    month <= 11 &&\n    date >= 1 &&\n    date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28))\n  );\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return (\n    seconds >= 0 &&\n    seconds < 60 &&\n    minutes >= 0 &&\n    minutes < 60 &&\n    hours >= 0 &&\n    hours < 25\n  );\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}\n\n// Fallback for modularized imports:\nexport default parseISO;\n","/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from 'date-fns'\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use contrustor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   )\n * }\n */\nexport function constructFrom(date, value) {\n  if (date instanceof Date) {\n    return new date.constructor(value);\n  } else {\n    return new Date(value);\n  }\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name constructNow\n * @category Generic Helpers\n * @summary Constructs a new current date using the passed value constructor.\n * @pure false\n *\n * @description\n * The function constructs a new current date using the constructor from\n * the reference date. It helps to build generic functions that accept date\n * extensions and use the current date.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n *\n * @returns Current date initialized using the given date constructor\n *\n * @example\n * import { constructNow, isSameDay } from 'date-fns'\n *\n * function isToday<DateType extends Date>(\n *   date: DateType | number | string,\n * ): boolean {\n *   // If we were to use `new Date()` directly, the function would  behave\n *   // differently in different timezones and return false for the same date.\n *   return isSameDay(date, constructNow(date));\n * }\n */\nexport function constructNow(date) {\n  return constructFrom(date, Date.now());\n}\n\n// Fallback for modularized imports:\nexport default constructNow;\n","/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { startOfDay } from \"./startOfDay.mjs\";\n\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day (and year and month)?\n *\n * @description\n * Are the given dates in the same day (and year and month)?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The first date to check\n * @param dateRight - The second date to check\n\n * @returns The dates are in the same day (and year and month)\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n *\n * @example\n * // Are 4 September and 4 October in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\n * //=> false\n *\n * @example\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\n * //=> false\n */\nexport function isSameDay(dateLeft, dateRight) {\n  const dateLeftStartOfDay = startOfDay(dateLeft);\n  const dateRightStartOfDay = startOfDay(dateRight);\n\n  return +dateLeftStartOfDay === +dateRightStartOfDay;\n}\n\n// Fallback for modularized imports:\nexport default isSameDay;\n","import { constructNow } from \"./constructNow.mjs\";\nimport { isSameDay } from \"./isSameDay.mjs\";\n\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is today\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * const result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\nexport function isToday(date) {\n  return isSameDay(date, constructNow(date));\n}\n\n// Fallback for modularized imports:\nexport default isToday;\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.mjs\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","/* eslint-disable no-unused-vars */\n\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.mjs\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.mjs\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.mjs\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","import { formatDistance } from \"./en-US/_lib/formatDistance.mjs\";\nimport { formatLong } from \"./en-US/_lib/formatLong.mjs\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.mjs\";\nimport { localize } from \"./en-US/_lib/localize.mjs\";\nimport { match } from \"./en-US/_lib/match.mjs\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","import { toDate } from \"../toDate.mjs\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { millisecondsInDay } from \"./constants.mjs\";\nimport { startOfDay } from \"./startOfDay.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(dateLeft, dateRight) {\n  const startOfDayLeft = startOfDay(dateLeft);\n  const startOfDayRight = startOfDay(dateRight);\n\n  const timestampLeft =\n    +startOfDayLeft - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  const timestampRight =\n    +startOfDayRight - getTimezoneOffsetInMilliseconds(startOfDayRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((timestampLeft - timestampRight) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date) {\n  const cleanDate = toDate(date);\n  const _date = constructFrom(date, 0);\n  _date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\nimport { startOfYear } from \"./startOfYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date) {\n  const _date = toDate(date);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","import { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { startOfWeek } from \"./startOfWeek.mjs\";\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date) {\n  return startOfWeek(date, { weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { getISOWeekYear } from \"./getISOWeekYear.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date) {\n  const year = getISOWeekYear(date);\n  const fourthOfJanuary = constructFrom(date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date) {\n  const _date = toDate(date);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { getWeekYear } from \"./getWeekYear.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { startOfWeekYear } from \"./startOfWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nexport function getWeek(date, options) {\n  const _date = toDate(date);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.mjs\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.mjs\";\nimport { getISOWeek } from \"../../getISOWeek.mjs\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.mjs\";\nimport { getWeek } from \"../../getWeek.mjs\";\nimport { getWeekYear } from \"../../getWeekYear.mjs\";\nimport { addLeadingZeros } from \"../addLeadingZeros.mjs\";\nimport { lightFormatters } from \"./lightFormatters.mjs\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(date.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    const timestamp = date.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { isDate } from \"./isDate.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  if (!isDate(date) && typeof date !== \"number\") {\n    return false;\n  }\n  const _date = toDate(date);\n  return !isNaN(Number(_date));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","import { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { formatters } from \"./_lib/format/formatters.mjs\";\nimport { longFormatters } from \"./_lib/format/longFormatters.mjs\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.mjs\";\nimport { isValid } from \"./isValid.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isSameYear\n * @category Year Helpers\n * @summary Are the given dates in the same year?\n *\n * @description\n * Are the given dates in the same year?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The first date to check\n * @param dateRight - The second date to check\n *\n * @returns The dates are in the same year\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same year?\n * const result = isSameYear(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n */\nexport function isSameYear(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n  return _dateLeft.getFullYear() === _dateRight.getFullYear();\n}\n\n// Fallback for modularized imports:\nexport default isSameYear;\n","import { constructNow } from \"./constructNow.mjs\";\nimport { isSameYear } from \"./isSameYear.mjs\";\n\n/**\n * @name isThisYear\n * @category Year Helpers\n * @summary Is the given date in the same year as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same year as the current date?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is in this year\n *\n * @example\n * // If today is 25 September 2014, is 2 July 2014 in this year?\n * const result = isThisYear(new Date(2014, 6, 2))\n * //=> true\n */\nexport function isThisYear(date) {\n  return isSameYear(date, constructNow(date));\n}\n\n// Fallback for modularized imports:\nexport default isThisYear;\n","import { format, parseISO, isToday, isThisYear } from 'date-fns';\r\n\r\nexport function formatDate(dateString) {\r\n    const date = parseISO(dateString);\r\n    if (isToday(date)) {\r\n        return format(date, 'HH:mm');\r\n    } else if (isThisYear(date)) {\r\n        return format(date, 'MM-dd HH:mm');\r\n    } else {\r\n        return format(date, 'yyyy-MM-dd HH:mm');\r\n    }\r\n}\r\n\r\nexport function saveToLocalStorage(key, value) {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n}\r\n\r\nexport function getFromLocalStorage(key) {\r\n    return JSON.parse(localStorage.getItem(key));\r\n}"],"names":["Math","pow","millisecondsInWeek","millisecondsInDay","millisecondsInMinute","millisecondsInHour","parseISO","argument","options","additionalDigits","dateStrings","splitDateString","date","parseYearResult","parseYear","parseDate","restDateString","year","isNaN","getTime","Date","NaN","timestamp","offset","time","parseTime","timezone","dirtyDate","result","setFullYear","getUTCFullYear","getUTCMonth","getUTCDate","setHours","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","parseTimezone","patterns","dateTimeDelimiter","timeZoneDelimiter","dateRegex","timeRegex","timezoneRegex","dateString","array","split","timeString","length","test","substr","token","exec","replace","regex","RegExp","captures","match","parseInt","century","slice","isWeekDate","dayOfYear","parseDateUnit","month","day","week","dayOfWeek","validateWeekDate","dayOfISOWeekYear","validateDate","validateDayOfYearDate","setUTCFullYear","max","value","hours","parseTimeUnit","minutes","seconds","validateTime","parseFloat","timezoneString","sign","validateTimezone","isoWeekYear","fourthOfJanuaryDay","getUTCDay","diff","setUTCDate","daysInMonths","isLeapYearIndex","_year","_hours","constructFrom","constructor","constructNow","now","toDate","argStr","Object","prototype","toString","call","startOfDay","_date","isSameDay","dateLeft","dateRight","dateLeftStartOfDay","dateRightStartOfDay","isToday","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","formatDistance","count","tokenValue","addSuffix","comparison","buildFormatLongFn","args","width","String","defaultWidth","format","formats","dateFormats","full","long","medium","short","timeFormats","dateTimeFormats","formatLong","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","formatRelative","_baseDate","_options","buildLocalizeFn","context","valuesArray","formattingValues","defaultFormattingWidth","values","index","argumentCallback","eraValues","narrow","abbreviated","wide","quarterValues","monthValues","dayValues","dayPeriodValues","am","pm","midnight","noon","morning","afternoon","evening","night","formattingDayPeriodValues","ordinalNumber","dirtyNumber","number","Number","rem100","localize","era","quarter","dayPeriod","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","matchedString","parsePatterns","defaultParseWidth","key","Array","isArray","findIndex","pattern","findKey","valueCallback","rest","object","predicate","hasOwnProperty","buildMatchPatternFn","parseResult","parsePattern","matchOrdinalNumberPattern","parseOrdinalNumberPattern","matchEraPatterns","parseEraPatterns","any","matchQuarterPatterns","parseQuarterPatterns","matchMonthPatterns","parseMonthPatterns","matchDayPatterns","parseDayPatterns","matchDayPeriodPatterns","parseDayPeriodPatterns","enUS","code","weekStartsOn","firstWeekContainsDate","defaultOptions","getDefaultOptions","getTimezoneOffsetInMilliseconds","utcDate","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","differenceInCalendarDays","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","round","startOfYear","cleanDate","getDayOfYear","startOfWeek","locale","getDay","setDate","startOfISOWeek","getISOWeekYear","fourthOfJanuaryOfNextYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","startOfISOWeekYear","fourthOfJanuary","getISOWeek","getWeekYear","firstWeekOfNextYear","firstWeekOfThisYear","startOfWeekYear","firstWeek","getWeek","addLeadingZeros","targetLength","output","abs","padStart","lightFormatters","y","signedYear","M","d","a","dayPeriodEnumValue","toUpperCase","h","H","m","s","S","numberOfDigits","milliseconds","fractionalSeconds","trunc","dayPeriodEnum","formatters","G","unit","Y","signedWeekYear","weekYear","twoDigitYear","R","u","Q","ceil","q","L","w","I","isoWeek","D","E","e","localDayOfWeek","c","i","isoDayOfWeek","toLowerCase","b","B","K","k","X","_localize","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","T","delimiter","absOffset","dateLongFormatter","timeLongFormatter","dateTimeLongFormatter","datePattern","timePattern","dateTimeFormat","longFormatters","p","P","dayOfYearTokenRE","weekYearTokenRE","throwTokens","isProtectedDayOfYearToken","isProtectedWeekYearToken","warnOrThrowProtectedError","input","_message","message","console","warn","includes","RangeError","subject","isDate","isValid","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","formatStr","originalDate","parts","map","substring","firstCharacter","longFormatter","join","isToken","cleanEscapedString","preprocessor","formatterOptions","part","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","formatter","matched","isSameYear","_dateLeft","_dateRight","isThisYear","formatDate","saveToLocalStorage","localStorage","setItem","JSON","stringify","getFromLocalStorage","parse","getItem"],"sourceRoot":""}