{"version":3,"file":"js/9891.fcfec6b6.js","mappings":"0LAAA,c,0CACIA,EAAAA,EAAAA,IAIM,yBAHFC,EAAAA,EAAAA,IAAgB,UAAZ,WAAO,KAEXA,EAAAA,EAAAA,IAAkC,OAA7BC,UAAQC,EAAAC,eAAa,OAJlCC,I,CASA,OACIC,KAAM,oBACNC,IAAAA,GACI,MAAO,CACHC,KAAM,i+TAkTd,EACAC,SAAU,CACNL,aAAAA,GAEI,OAAOM,KAAKF,KACPG,QAAQ,KAAM,QACdA,QAAQ,KAAM,OACvB,I,UC/TR,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,O","sources":["webpack://social-vue-3/./src/views/Apps/Contract/smartContract.vue","webpack://social-vue-3/./src/views/Apps/Contract/smartContract.vue?26a2"],"sourcesContent":["<template>\r\n    <div>\r\n        <h2>智能合約程式碼</h2>\r\n        <!-- 使用 v-html 渲染代碼文本 -->\r\n        <pre v-html=\"formattedCode\"></pre>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: \"SmartContractCode\",\r\n    data() {\r\n        return {\r\n            code: `\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ncontract SocialMedia {\r\n    constructor() payable {\r\n        require(msg.value >= 1 ether, \"Insufficient initial funding\"); // 要求部署合約時至少傳入 1 ETH\r\n    }\r\n\r\n    uint256 constant registrationReward = 0.01 ether;\r\n    uint256 constant articleUploadReward = 0.0007 ether;\r\n    // uint256 constant verificationFee = 0.02 ether; // 定義驗證保證金\r\n    uint256 constant verificationReward = 0.0003 ether;\r\n    // uint256 constant verificationSuccessReward = 0.01 ether;\r\n    uint256 constant evidenceReward = 0.0015 ether;\r\n\r\n    // uint256 public totalRewardsGiven;\r\n    \r\n    struct User {\r\n        string name;\r\n        uint256 articleNum;\r\n        mapping(uint256 => uint256) articles;\r\n    }\r\n    mapping(address => User) public users;\r\n    uint256 public userCount;\r\n\r\n    struct Article {\r\n        string username;\r\n        string title;\r\n        string content;\r\n        address payable author;\r\n        uint256 timestamp;\r\n        uint256 commentsNum;\r\n        mapping(uint256 => Comment) comments;\r\n        bool isVerified;\r\n    }\r\n\r\n    uint256 public articleCount;\r\n    mapping(uint256 => Article) public articles;\r\n\r\n    struct Comment {\r\n        string content;\r\n        address author;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    struct VerificationRequest {\r\n        address requester;\r\n        string reason;\r\n        uint64 supportVotes;\r\n        uint64 againstVotes;\r\n        uint256 timestamp ;\r\n        mapping(address => uint8) votes;\r\n        mapping(uint256 => Evidence) evidences;\r\n        uint256 evidenceCount;\r\n    }\r\n\r\n    mapping(uint256 => VerificationRequest) public verificationRequests;\r\n    mapping(uint256 => uint256) public verificationRequestCount;\r\n\r\n    mapping(uint256 => bytes32) public articleTransactionHashes;\r\n\r\n    struct Evidence {\r\n        string description;\r\n        address provider;\r\n        uint256 timestamp;\r\n        uint256 voteCount;\r\n    }\r\n\r\n    mapping(uint256 => mapping(uint256 => mapping(uint256 => Evidence))) public evidences;\r\n    mapping(uint256 => mapping(uint256 => uint256)) public evidenceCount;\r\n    \r\n    // 封裝檢查餘額並發送獎勵的函數\r\n    function rewardUser(address user, uint256 rewardAmount) internal {\r\n        // 檢查合約餘額是否足夠\r\n        require(address(this).balance >= rewardAmount, \"Contract balance is too low\");\r\n        // 發送獎勵\r\n        payable(user).transfer(rewardAmount);\r\n    }\r\n\r\n    function registerUser(string memory _name) public {\r\n        require(bytes(_name).length > 0, \"Name cannot be empty\");\r\n        require(bytes(users[msg.sender].name).length == 0, \"User already registered\");\r\n        User storage newUser = users[msg.sender];\r\n        newUser.articleNum = 0;\r\n        newUser.name = _name;\r\n        userCount++;\r\n        rewardUser(msg.sender, registrationReward);\r\n    }\r\n\r\n    event ArticlePublished(\r\n        uint256 indexed articleId\r\n    );\r\n\r\n    function publish(\r\n        string memory _title,\r\n        string memory _content,\r\n        uint256 _timestamp\r\n    ) public returns (uint256 articleId) {\r\n        require(bytes(_title).length > 0, \"Title cannot be empty\");\r\n        require(bytes(_content).length > 0, \"Content cannot be empty\");\r\n        require(bytes(users[msg.sender].name).length > 0, \"User must be registered\");\r\n\r\n        Article storage newArticle = articles[articleCount++];\r\n        newArticle.username = users[msg.sender].name;\r\n        newArticle.title = _title;\r\n        newArticle.content = _content;\r\n        newArticle.author = payable(msg.sender);\r\n        newArticle.timestamp = _timestamp;\r\n        newArticle.commentsNum = 0;\r\n        newArticle.isVerified = false;\r\n        // newArticle.verificationRequestCount = 0;\r\n\r\n        users[msg.sender].articles[users[msg.sender].articleNum++] = articleCount - 1;\r\n\r\n        // bytes32 txHash = keccak256(abi.encodePacked(msg.sender, _title, _content, _timestamp));\r\n        // articleTransactionHashes[articleCount - 1] = txHash;\r\n        rewardUser(msg.sender, articleUploadReward);\r\n        // 發出事件\r\n        emit ArticlePublished(articleCount - 1);\r\n        return articleCount - 1;\r\n    }\r\n\r\n    function setArticle(\r\n        uint256 _articleId,\r\n        string memory _title,\r\n        string memory _content\r\n    ) public {\r\n        require(msg.sender == articles[_articleId].author, \"Only the author can update the article\");\r\n        articles[_articleId].title = _title;\r\n        articles[_articleId].content = _content;\r\n    }\r\n\r\n    function getUserInfo(address _address)\r\n        public\r\n        view\r\n        returns (string memory username, uint256 articleNum)\r\n    {\r\n        User storage _user = users[_address];\r\n        return (_user.name, _user.articleNum);\r\n    }\r\n\r\n    function getArticle(uint256 _articleId)\r\n        public\r\n        view\r\n        returns (\r\n            string memory username,\r\n            string memory title,\r\n            string memory content,\r\n            address author,\r\n            uint256 timestamp,\r\n            uint256 commentsNum,\r\n            bool isVerified\r\n            // uint256 verificationRequestCount\r\n        )\r\n    {\r\n        Article storage _article = articles[_articleId];\r\n        return (\r\n            _article.username,\r\n            _article.title,\r\n            _article.content,\r\n            _article.author,\r\n            _article.timestamp,\r\n            _article.commentsNum,\r\n            _article.isVerified\r\n            // _article.verificationRequestCount\r\n        );\r\n    }\r\n\r\n    function getAllArticles() public view returns (uint256[] memory) {\r\n        uint256[] memory articleIds = new uint256[](articleCount);\r\n        for (uint256 i = 0; i < articleCount; i++) {\r\n            articleIds[i] = i;\r\n        }\r\n        return articleIds;\r\n    }\r\n\r\n    function getArticleSummary(uint256 _articleId)\r\n        public\r\n        view\r\n        returns (\r\n            string memory title,\r\n            address author,\r\n            uint256 timestamp\r\n        )\r\n    {\r\n        Article storage _article = articles[_articleId];\r\n        return (_article.title, _article.author, _article.timestamp);\r\n    }\r\n\r\n    function addComment(\r\n        uint256 _articleId,\r\n        string memory _content,\r\n        uint256 _timestamp\r\n    ) public {\r\n        require(bytes(_content).length > 0, \"Comment content cannot be empty\");\r\n        require(bytes(users[msg.sender].name).length > 0, \"User must be registered\");\r\n        require(_articleId < articleCount, \"Article does not exist\");\r\n\r\n        Article storage article = articles[_articleId];\r\n        uint256 commentId = article.commentsNum++;\r\n\r\n        article.comments[commentId] = Comment({\r\n            content: _content,\r\n            author: msg.sender,\r\n            timestamp: _timestamp\r\n        });\r\n    }\r\n\r\n    function getComment(uint256 _articleId, uint256 _commentId)\r\n        public\r\n        view\r\n        returns (\r\n            string memory content,\r\n            address author,\r\n            uint256 timestamp\r\n        )\r\n    {\r\n        require(_articleId < articleCount, \"Article does not exist\");\r\n        Article storage article = articles[_articleId];\r\n        Comment storage comment = article.comments[_commentId];\r\n        return (comment.content, comment.author, comment.timestamp);\r\n    }\r\n\r\n    uint256 public verificationCount;\r\n\r\n    event verificationed(uint256 indexed verificationId);\r\n\r\n    function requestVerification(uint256 _articleId, string memory _reason, uint256 _timestamp) public {\r\n        require(bytes(_reason).length > 0, \"Reason cannot be empty\");\r\n        require(_articleId < articleCount, \"Article does not exist\");\r\n        // require(msg.value == verificationFee, \"Must submit 0.02 ETH as verification fee\"); // 確認支付保證金\r\n\r\n        // Article storage article = articles[_articleId];\r\n        // uint256 requestId = article.verificationRequestCount++;\r\n\r\n        VerificationRequest storage request = verificationRequests[verificationCount++];\r\n        request.requester = msg.sender;\r\n        request.reason = _reason;\r\n        request.timestamp = _timestamp;\r\n        rewardUser(msg.sender, verificationReward);\r\n        emit verificationed(verificationCount-1);\r\n    }\r\n    \r\n\r\n    // 用戶進行投票，選擇支持或反對\r\n    function voteVerification(uint256 _verificationId, bool support) public {\r\n        require(_verificationId < verificationCount, \"Verification request does not exist\");\r\n\r\n        // 確保用戶沒有對該驗證請求投票過\r\n        require(verificationRequests[_verificationId].votes[msg.sender] == 0, \"You have already voted\");\r\n\r\n        VerificationRequest storage request = verificationRequests[_verificationId];\r\n\r\n        // 根據用戶選擇進行支持或反對票計數\r\n        if (support) {\r\n            request.supportVotes++;\r\n            request.votes[msg.sender] = 1; // 記錄支持\r\n        } else {\r\n            request.againstVotes++;\r\n            request.votes[msg.sender] = 2; // 記錄反對\r\n        }\r\n    \r\n\r\n        // 檢查是否支持票數超過一半用戶\r\n        // if (request.supportVotes > userCount / 2) {\r\n        //     // 如果支持票數超過一半，標記文章為已驗證\r\n        //     uint256 articleId = request.articleId;\r\n        //     articles[articleId].isVerified = true;\r\n\r\n        //     // 退還保證金\r\n        //     payable(request.requester).transfer(verificationFee);\r\n        // }\r\n    }\r\n\r\n    function getVote(uint256 _verificationId, address _voter) public view returns (uint8) {\r\n        return verificationRequests[_verificationId].votes[_voter];\r\n    }\r\n\r\n\r\n\r\n    function provideEvidence(\r\n        uint256 _verificationId,\r\n        string memory _description,\r\n        uint256 _timestamp\r\n    ) public {\r\n        require(bytes(_description).length > 0, \"Description cannot be empty\");\r\n        require(_verificationId < articleCount, \"Article does not exist\");\r\n        // require(_requestId < verificationRequests[_articleId].length, \"Request does not exist\");\r\n\r\n        VerificationRequest storage request = verificationRequests[_verificationId];\r\n        uint256 evidenceId = request.evidenceCount++;\r\n\r\n        request.evidences[evidenceId] = Evidence({\r\n            description: _description,\r\n            provider: msg.sender,\r\n            timestamp: _timestamp,\r\n            voteCount: 0\r\n        });\r\n        rewardUser(msg.sender, evidenceReward);\r\n    }\r\n}\r\n\r\n\r\n        `,\r\n        };\r\n    },\r\n    computed: {\r\n        formattedCode() {\r\n            // 將 < 和 > 進行轉義處理，防止它們被解析成標籤\r\n            return this.code\r\n                .replace(/</g, \"&lt;\")\r\n                .replace(/>/g, \"&gt;\");\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<style>\r\npre {\r\n    background-color: #f4f4f4;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    overflow-x: auto;\r\n}\r\n\r\ncode {\r\n    font-family: monospace;\r\n    color: #333;\r\n}\r\n</style>","import { render } from \"./smartContract.vue?vue&type=template&id=77c0a770\"\nimport script from \"./smartContract.vue?vue&type=script&lang=js\"\nexport * from \"./smartContract.vue?vue&type=script&lang=js\"\n\nimport \"./smartContract.vue?vue&type=style&index=0&id=77c0a770&lang=css\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["_createElementBlock","_createElementVNode","innerHTML","$options","formattedCode","_hoisted_1","name","data","code","computed","this","replace","__exports__","render"],"sourceRoot":""}