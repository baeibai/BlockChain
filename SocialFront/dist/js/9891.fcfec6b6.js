"use strict";(self["webpackChunksocial_vue_3"]=self["webpackChunksocial_vue_3"]||[]).push([[9891],{9891:function(e,n,t){t.r(n),t.d(n,{default:function(){return o}});var i=t(641);const r=["innerHTML"];function s(e,n,t,s,a,u){return(0,i.uX)(),(0,i.CE)("div",null,[n[0]||(n[0]=(0,i.Lk)("h2",null,"智能合約程式碼",-1)),(0,i.Lk)("pre",{innerHTML:u.formattedCode},null,8,r)])}var a={name:"SmartContractCode",data(){return{code:'\n// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ncontract SocialMedia {\n    constructor() payable {\n        require(msg.value >= 1 ether, "Insufficient initial funding"); // 要求部署合約時至少傳入 1 ETH\n    }\n\n    uint256 constant registrationReward = 0.01 ether;\n    uint256 constant articleUploadReward = 0.0007 ether;\n    // uint256 constant verificationFee = 0.02 ether; // 定義驗證保證金\n    uint256 constant verificationReward = 0.0003 ether;\n    // uint256 constant verificationSuccessReward = 0.01 ether;\n    uint256 constant evidenceReward = 0.0015 ether;\n\n    // uint256 public totalRewardsGiven;\n    \n    struct User {\n        string name;\n        uint256 articleNum;\n        mapping(uint256 => uint256) articles;\n    }\n    mapping(address => User) public users;\n    uint256 public userCount;\n\n    struct Article {\n        string username;\n        string title;\n        string content;\n        address payable author;\n        uint256 timestamp;\n        uint256 commentsNum;\n        mapping(uint256 => Comment) comments;\n        bool isVerified;\n    }\n\n    uint256 public articleCount;\n    mapping(uint256 => Article) public articles;\n\n    struct Comment {\n        string content;\n        address author;\n        uint256 timestamp;\n    }\n\n    struct VerificationRequest {\n        address requester;\n        string reason;\n        uint64 supportVotes;\n        uint64 againstVotes;\n        uint256 timestamp ;\n        mapping(address => uint8) votes;\n        mapping(uint256 => Evidence) evidences;\n        uint256 evidenceCount;\n    }\n\n    mapping(uint256 => VerificationRequest) public verificationRequests;\n    mapping(uint256 => uint256) public verificationRequestCount;\n\n    mapping(uint256 => bytes32) public articleTransactionHashes;\n\n    struct Evidence {\n        string description;\n        address provider;\n        uint256 timestamp;\n        uint256 voteCount;\n    }\n\n    mapping(uint256 => mapping(uint256 => mapping(uint256 => Evidence))) public evidences;\n    mapping(uint256 => mapping(uint256 => uint256)) public evidenceCount;\n    \n    // 封裝檢查餘額並發送獎勵的函數\n    function rewardUser(address user, uint256 rewardAmount) internal {\n        // 檢查合約餘額是否足夠\n        require(address(this).balance >= rewardAmount, "Contract balance is too low");\n        // 發送獎勵\n        payable(user).transfer(rewardAmount);\n    }\n\n    function registerUser(string memory _name) public {\n        require(bytes(_name).length > 0, "Name cannot be empty");\n        require(bytes(users[msg.sender].name).length == 0, "User already registered");\n        User storage newUser = users[msg.sender];\n        newUser.articleNum = 0;\n        newUser.name = _name;\n        userCount++;\n        rewardUser(msg.sender, registrationReward);\n    }\n\n    event ArticlePublished(\n        uint256 indexed articleId\n    );\n\n    function publish(\n        string memory _title,\n        string memory _content,\n        uint256 _timestamp\n    ) public returns (uint256 articleId) {\n        require(bytes(_title).length > 0, "Title cannot be empty");\n        require(bytes(_content).length > 0, "Content cannot be empty");\n        require(bytes(users[msg.sender].name).length > 0, "User must be registered");\n\n        Article storage newArticle = articles[articleCount++];\n        newArticle.username = users[msg.sender].name;\n        newArticle.title = _title;\n        newArticle.content = _content;\n        newArticle.author = payable(msg.sender);\n        newArticle.timestamp = _timestamp;\n        newArticle.commentsNum = 0;\n        newArticle.isVerified = false;\n        // newArticle.verificationRequestCount = 0;\n\n        users[msg.sender].articles[users[msg.sender].articleNum++] = articleCount - 1;\n\n        // bytes32 txHash = keccak256(abi.encodePacked(msg.sender, _title, _content, _timestamp));\n        // articleTransactionHashes[articleCount - 1] = txHash;\n        rewardUser(msg.sender, articleUploadReward);\n        // 發出事件\n        emit ArticlePublished(articleCount - 1);\n        return articleCount - 1;\n    }\n\n    function setArticle(\n        uint256 _articleId,\n        string memory _title,\n        string memory _content\n    ) public {\n        require(msg.sender == articles[_articleId].author, "Only the author can update the article");\n        articles[_articleId].title = _title;\n        articles[_articleId].content = _content;\n    }\n\n    function getUserInfo(address _address)\n        public\n        view\n        returns (string memory username, uint256 articleNum)\n    {\n        User storage _user = users[_address];\n        return (_user.name, _user.articleNum);\n    }\n\n    function getArticle(uint256 _articleId)\n        public\n        view\n        returns (\n            string memory username,\n            string memory title,\n            string memory content,\n            address author,\n            uint256 timestamp,\n            uint256 commentsNum,\n            bool isVerified\n            // uint256 verificationRequestCount\n        )\n    {\n        Article storage _article = articles[_articleId];\n        return (\n            _article.username,\n            _article.title,\n            _article.content,\n            _article.author,\n            _article.timestamp,\n            _article.commentsNum,\n            _article.isVerified\n            // _article.verificationRequestCount\n        );\n    }\n\n    function getAllArticles() public view returns (uint256[] memory) {\n        uint256[] memory articleIds = new uint256[](articleCount);\n        for (uint256 i = 0; i < articleCount; i++) {\n            articleIds[i] = i;\n        }\n        return articleIds;\n    }\n\n    function getArticleSummary(uint256 _articleId)\n        public\n        view\n        returns (\n            string memory title,\n            address author,\n            uint256 timestamp\n        )\n    {\n        Article storage _article = articles[_articleId];\n        return (_article.title, _article.author, _article.timestamp);\n    }\n\n    function addComment(\n        uint256 _articleId,\n        string memory _content,\n        uint256 _timestamp\n    ) public {\n        require(bytes(_content).length > 0, "Comment content cannot be empty");\n        require(bytes(users[msg.sender].name).length > 0, "User must be registered");\n        require(_articleId < articleCount, "Article does not exist");\n\n        Article storage article = articles[_articleId];\n        uint256 commentId = article.commentsNum++;\n\n        article.comments[commentId] = Comment({\n            content: _content,\n            author: msg.sender,\n            timestamp: _timestamp\n        });\n    }\n\n    function getComment(uint256 _articleId, uint256 _commentId)\n        public\n        view\n        returns (\n            string memory content,\n            address author,\n            uint256 timestamp\n        )\n    {\n        require(_articleId < articleCount, "Article does not exist");\n        Article storage article = articles[_articleId];\n        Comment storage comment = article.comments[_commentId];\n        return (comment.content, comment.author, comment.timestamp);\n    }\n\n    uint256 public verificationCount;\n\n    event verificationed(uint256 indexed verificationId);\n\n    function requestVerification(uint256 _articleId, string memory _reason, uint256 _timestamp) public {\n        require(bytes(_reason).length > 0, "Reason cannot be empty");\n        require(_articleId < articleCount, "Article does not exist");\n        // require(msg.value == verificationFee, "Must submit 0.02 ETH as verification fee"); // 確認支付保證金\n\n        // Article storage article = articles[_articleId];\n        // uint256 requestId = article.verificationRequestCount++;\n\n        VerificationRequest storage request = verificationRequests[verificationCount++];\n        request.requester = msg.sender;\n        request.reason = _reason;\n        request.timestamp = _timestamp;\n        rewardUser(msg.sender, verificationReward);\n        emit verificationed(verificationCount-1);\n    }\n    \n\n    // 用戶進行投票，選擇支持或反對\n    function voteVerification(uint256 _verificationId, bool support) public {\n        require(_verificationId < verificationCount, "Verification request does not exist");\n\n        // 確保用戶沒有對該驗證請求投票過\n        require(verificationRequests[_verificationId].votes[msg.sender] == 0, "You have already voted");\n\n        VerificationRequest storage request = verificationRequests[_verificationId];\n\n        // 根據用戶選擇進行支持或反對票計數\n        if (support) {\n            request.supportVotes++;\n            request.votes[msg.sender] = 1; // 記錄支持\n        } else {\n            request.againstVotes++;\n            request.votes[msg.sender] = 2; // 記錄反對\n        }\n    \n\n        // 檢查是否支持票數超過一半用戶\n        // if (request.supportVotes > userCount / 2) {\n        //     // 如果支持票數超過一半，標記文章為已驗證\n        //     uint256 articleId = request.articleId;\n        //     articles[articleId].isVerified = true;\n\n        //     // 退還保證金\n        //     payable(request.requester).transfer(verificationFee);\n        // }\n    }\n\n    function getVote(uint256 _verificationId, address _voter) public view returns (uint8) {\n        return verificationRequests[_verificationId].votes[_voter];\n    }\n\n\n\n    function provideEvidence(\n        uint256 _verificationId,\n        string memory _description,\n        uint256 _timestamp\n    ) public {\n        require(bytes(_description).length > 0, "Description cannot be empty");\n        require(_verificationId < articleCount, "Article does not exist");\n        // require(_requestId < verificationRequests[_articleId].length, "Request does not exist");\n\n        VerificationRequest storage request = verificationRequests[_verificationId];\n        uint256 evidenceId = request.evidenceCount++;\n\n        request.evidences[evidenceId] = Evidence({\n            description: _description,\n            provider: msg.sender,\n            timestamp: _timestamp,\n            voteCount: 0\n        });\n        rewardUser(msg.sender, evidenceReward);\n    }\n}\n\n\n        '}},computed:{formattedCode(){return this.code.replace(/</g,"&lt;").replace(/>/g,"&gt;")}}},u=t(6262);const c=(0,u.A)(a,[["render",s]]);var o=c}}]);
//# sourceMappingURL=9891.fcfec6b6.js.map